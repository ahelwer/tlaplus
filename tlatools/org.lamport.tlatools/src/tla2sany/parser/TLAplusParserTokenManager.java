/* Generated By:23&JavaCC: Do not edit this line. TLAplusParserTokenManager.java */
package tla2sany.parser;
import tla2sany.st.ParseTree;
import tla2sany.st.TreeNode;
import tla2sany.utilities.Stack;
import tla2sany.utilities.Vector;
import tlc2.output.EC;
import util.Assert;
import util.TLAConstants;
import util.ToolIO;
import util.UniqueString;

public class TLAplusParserTokenManager implements TLAplusParserConstants
{
  static int bracketCount = 0;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L)
            return 10;
         return -1;
      case 1:
         if ((active0 & 0x4L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x4L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_0(0x4L);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(3, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (curChar == 45)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 8);
                  break;
               case 9:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 69)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x40000000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjAddStates(3, 4);
                  break;
               case 1:
                  if (curChar == 46)
                     kind = 31;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 42 && kind > 31)
                     kind = 31;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAddStates(5, 13);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 48)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 1:
               case 2:
                  if (curChar == 45)
                     jjCheckNAddStates(14, 16);
                  break;
               case 3:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(3, 9);
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(19);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(5, 13);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 28);
                  break;
               case 27:
               case 42:
               case 52:
                  if (curChar == 47)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 32);
                  break;
               case 30:
                  if (curChar == 47 && kind > 113)
                     kind = 113;
                  break;
               case 32:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 47:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(49);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 53:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 56:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe0777fffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAddStates(23, 27);
                  }
                  else if ((0x880000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjAddStates(28, 30);
                  }
                  else if (curChar == 64)
                  {
                     if (kind > 293)
                        kind = 293;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(14, 15);
                  if (curChar == 83)
                     jjCheckNAdd(17);
                  else if (curChar == 87)
                     jjCheckNAdd(17);
                  break;
               case 4:
                  if (curChar == 69 && kind > 20)
                     kind = 20;
                  break;
               case 5:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 13:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar != 70)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 87)
                     jjCheckNAdd(17);
                  break;
               case 21:
                  if (curChar == 83)
                     jjCheckNAdd(17);
                  break;
               case 22:
                  if (curChar == 64)
                     kind = 293;
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 26:
                  if (curChar == 92 && kind > 112)
                     kind = 112;
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 31:
               case 46:
               case 55:
                  if (curChar == 92)
                     jjCheckNAdd(30);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x880000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjAddStates(28, 30);
                  break;
               case 40:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 44:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 48:
                  if ((0x7fffffe87ffffbeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x7fffffe0777fffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAddStates(23, 27);
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(51, 53);
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 56);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 32)
                     kind = 32;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000000L) != 0L || (active3 & 0x70000000L) != 0L)
            return 18;
         if ((active2 & 0x1aL) != 0L)
            return 49;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x204L) != 0L)
         {
            jjmatchedKind = 293;
            return 94;
         }
         if ((active1 & 0x30000000000000L) != 0L || (active2 & 0x6000000000000000L) != 0L)
            return 41;
         if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 130;
            return -1;
         }
         if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 133;
            return -1;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 293;
            return 252;
         }
         if ((active0 & 0x60000000000L) != 0L)
         {
            jjmatchedKind = 293;
            return 143;
         }
         if ((active3 & 0x1800L) != 0L)
            return 165;
         if ((active2 & 0x780000000000000L) != 0L)
            return 134;
         if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 293;
            return -1;
         }
         if ((active3 & 0x780L) != 0L)
            return 161;
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x40000000006c8000L) != 0L)
         {
            jjmatchedKind = 293;
            return 184;
         }
         if ((active0 & 0x1800000008000000L) != 0L || (active1 & 0x100000000000000L) != 0L || (active2 & 0x3fffffffefffc0L) != 0L || (active3 & 0x1000000000L) != 0L || (active4 & 0x1800000000L) != 0L)
            return 203;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x100001000L) != 0L)
            return 45;
         if ((active1 & 0x20000000L) != 0L || (active3 & 0xf80000000L) != 0L)
            return 111;
         if ((active0 & 0x28000000000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 293;
            return 16;
         }
         if ((active1 & 0x8000000L) != 0L)
            return 272;
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 148;
            return -1;
         }
         if ((active1 & 0x1000000000L) != 0L || (active3 & 0x78000L) != 0L)
            return 29;
         if ((active1 & 0x1L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 293;
            return 105;
         }
         if ((active1 & 0x40000080000000L) != 0L || (active2 & 0x8000000000000000L) != 0L || (active3 & 0x7L) != 0L)
            return 124;
         if ((active1 & 0x20c00L) != 0L)
         {
            jjmatchedKind = 293;
            return 11;
         }
         if ((active0 & 0xc1d6b00000000000L) != 0L || (active1 & 0xb0000000000060f8L) != 0L)
         {
            jjmatchedKind = 293;
            return 273;
         }
         return -1;
      case 1:
         if ((active2 & 0x7800000L) != 0L)
            return 219;
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 1;
            }
            return 266;
         }
         if ((active3 & 0x20000L) != 0L)
            return 28;
         if ((active0 & 0x4016000000000000L) != 0L)
            return 273;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 1;
            }
            return 104;
         }
         if ((active2 & 0x20000L) != 0L)
            return 208;
         if ((active3 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active2 & 0x1f8000000L) != 0L)
            return 66;
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 1;
            }
            return 15;
         }
         if ((active2 & 0x300L) != 0L)
            return 68;
         if ((active1 & 0x40000000004c8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 1;
            }
            return 274;
         }
         if ((active0 & 0xa1e0b60000000000L) != 0L || (active1 & 0xb0000000000263fcL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 1;
            }
            return 273;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 1;
            }
            return 59;
         }
         if ((active2 & 0x8000000000000000L) != 0L)
            return 123;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active2 & 0x200000L) != 0L)
            return 222;
         if ((active3 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0xc00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 1;
            }
            return 10;
         }
         return -1;
      case 2:
         if ((active1 & 0xc00L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 2;
            return 9;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x40000000004c8000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 2;
            return 274;
         }
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
            return 106;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 2;
            return 265;
         }
         if ((active3 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 89;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xa164b60000000000L) != 0L || (active1 & 0xb0000000000243f4L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 2;
            return 273;
         }
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 2;
            return -1;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x88000000000000L) != 0L || (active1 & 0x2008L) != 0L)
            return 273;
         return -1;
      case 3:
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 3;
            }
            return 264;
         }
         if ((active2 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 148;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xa000120000000000L) != 0L || (active1 & 0x20230L) != 0L)
            return 273;
         if ((active1 & 0x400000L) != 0L)
            return 274;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x164a40000000000L) != 0L || (active1 & 0xb000000000004dc5L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 3;
            }
            return 273;
         }
         if ((active1 & 0x40000000000c8000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 3;
            }
            return 274;
         }
         return -1;
      case 4:
         if ((active2 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 148;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x120000000000000L) != 0L || (active1 & 0x8000000000000c00L) != 0L)
            return 273;
         if ((active1 & 0x8000L) != 0L)
            return 274;
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 4;
            }
            return 263;
         }
         if ((active0 & 0x44a40000000000L) != 0L || (active1 & 0x30000000000041c5L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 4;
            }
            return 273;
         }
         if ((active1 & 0x40000000000c0000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 4;
            }
            return 274;
         }
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4800000000000L) != 0L || (active1 & 0x30000000000040c4L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 5;
            return 273;
         }
         if ((active1 & 0xc0000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 5;
            return 274;
         }
         if ((active2 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 148;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40244000000000L) != 0L || (active1 & 0x101L) != 0L || (active2 & 0x1L) != 0L)
            return 273;
         if ((active1 & 0x4000000000000000L) != 0L)
            return 274;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active2 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 148;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x10000000000000c4L) != 0L)
            return 273;
         if ((active1 & 0x40000L) != 0L)
            return 274;
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x2000000000004000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 6;
            }
            return 273;
         }
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 293;
               jjmatchedPos = 6;
            }
            return 274;
         }
         return -1;
      case 7:
         if ((active2 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 148;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 273;
         if ((active1 & 0x80000L) != 0L)
            return 274;
         if ((active1 & 0x2000000000004000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 7;
            return 273;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 122;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active2 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 148;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active1 & 0x2000000000004000L) != 0L)
            return 273;
         return -1;
      case 9:
         if ((active2 & 0x200000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 148;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x8000000L, 0x0L);
      case 35:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x800000000000000L, 0x0L, 0x0L);
      case 36:
         jjmatchedKind = 214;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x200000L, 0x0L);
      case 37:
         jjmatchedKind = 217;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x1000000L, 0x0L);
      case 38:
         jjmatchedKind = 212;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x80000L, 0x0L);
      case 39:
         return jjStopAtPos(0, 114);
      case 40:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0xf80000000L, 0x0L);
      case 41:
         return jjStopAtPos(0, 94);
      case 42:
         jjmatchedKind = 196;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x8L, 0x0L);
      case 43:
         jjmatchedKind = 198;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x20L, 0x0L);
      case 44:
         return jjStopAtPos(0, 87);
      case 45:
         jjmatchedKind = 194;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40000080000000L, 0x8000000000000000L, 0x3L, 0x0L);
      case 46:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x6000L, 0x0L);
      case 47:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0xaL, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x70000000L, 0x0L);
      case 60:
         jjmatchedKind = 202;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x380L, 0x0L);
      case 61:
         jjmatchedKind = 186;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x380000000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 204;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x800L, 0x0L);
      case 63:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x800000L, 0x0L);
      case 64:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x0L, 0x4000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_2(0x4000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_2(0x4000000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_2(0x60000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1L, 0x1L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_2(0xb00000000000L, 0x1000000000000000L, 0x0L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x30L, 0x0L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_2(0x16000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_2(0x28000000000000L, 0x100L, 0x0L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_2(0x40000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_2(0x80000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_2(0x8100000000000000L, 0xc0L, 0x0L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x20c00L, 0x0L, 0x0L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2000L, 0x0L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4000L, 0x0L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_2(0x400000000000000L, 0x4000000000088000L, 0x0L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_2(0x2000000000000000L, 0x204L, 0x0L, 0x0L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xa000000000000008L, 0x0L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x640000L, 0x0L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_2(0x8000000000L, 0x1000L, 0x0L, 0x0L, 0x0L);
      case 92:
         jjmatchedKind = 181;
         return jjMoveStringLiteralDfa1_2(0x1800000008000000L, 0x100000000000000L, 0x1fffffffefffc0L, 0x1000000000L, 0x1800000000L);
      case 93:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200000000L, 0x0L, 0x0L, 0x0L);
      case 94:
         jjmatchedKind = 190;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x30000000000000L, 0x2000000000000000L, 0x0L, 0x0L);
      case 95:
         return jjStartNfaWithStates_2(0, 91, 272);
      case 123:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x800000000L, 0x0L, 0x0L, 0x0L);
      case 124:
         jjmatchedKind = 208;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000000000L, 0x0L, 0x68000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 102);
      case 126:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x40000000000000L, 0x0L, 0x0L);
      case 215:
         return jjStopAtPos(0, 287);
      case 247:
         return jjStopAtPos(0, 240);
      case 8214:
         return jjStopAtPos(0, 289);
      case 8229:
         return jjStopAtPos(0, 242);
      case 8230:
         return jjStopAtPos(0, 243);
      case 8252:
         return jjStopAtPos(0, 245);
      case 8263:
         return jjStopAtPos(0, 269);
      case 8605:
         return jjStopAtPos(0, 253);
      case 8658:
         return jjStopAtPos(0, 249);
      case 8660:
         return jjStopAtPos(0, 248);
      case 8696:
         return jjStopAtPos(0, 265);
      case 8712:
         return jjStopAtPos(0, 148);
      case 8713:
         return jjStopAtPos(0, 259);
      case 8728:
         return jjStopAtPos(0, 237);
      case 8733:
         return jjStopAtPos(0, 268);
      case 8743:
         return jjStopAtPos(0, 130);
      case 8744:
         return jjStopAtPos(0, 133);
      case 8745:
         return jjStopAtPos(0, 235);
      case 8746:
         return jjStopAtPos(0, 239);
      case 8764:
         return jjStopAtPos(0, 272);
      case 8768:
         return jjStopAtPos(0, 290);
      case 8771:
         return jjStopAtPos(0, 273);
      case 8773:
         return jjStopAtPos(0, 238);
      case 8776:
         return jjStopAtPos(0, 229);
      case 8781:
         return jjStopAtPos(0, 231);
      case 8784:
         return jjStopAtPos(0, 241);
      case 8788:
         return jjStopAtPos(0, 230);
      case 8800:
         return jjStopAtPos(0, 258);
      case 8801:
         return jjStopAtPos(0, 244);
      case 8804:
         return jjStopAtPos(0, 254);
      case 8805:
         return jjStopAtPos(0, 246);
      case 8810:
         return jjStopAtPos(0, 255);
      case 8811:
         return jjStopAtPos(0, 247);
      case 8826:
         return jjStopAtPos(0, 266);
      case 8827:
         return jjStopAtPos(0, 283);
      case 8834:
         return jjStopAtPos(0, 281);
      case 8835:
         return jjStopAtPos(0, 285);
      case 8838:
         return jjStopAtPos(0, 282);
      case 8839:
         return jjStopAtPos(0, 286);
      case 8846:
         return jjStopAtPos(0, 288);
      case 8847:
         return jjStopAtPos(0, 276);
      case 8848:
         return jjStopAtPos(0, 278);
      case 8849:
         return jjStopAtPos(0, 277);
      case 8850:
         return jjStopAtPos(0, 279);
      case 8851:
         return jjStopAtPos(0, 274);
      case 8852:
         return jjStopAtPos(0, 275);
      case 8853:
         return jjStopAtPos(0, 262);
      case 8854:
         return jjStopAtPos(0, 261);
      case 8855:
         return jjStopAtPos(0, 264);
      case 8856:
         return jjStopAtPos(0, 263);
      case 8857:
         return jjStopAtPos(0, 260);
      case 8866:
         return jjStopAtPos(0, 271);
      case 8867:
         return jjStopAtPos(0, 257);
      case 8872:
         return jjStopAtPos(0, 270);
      case 8901:
         return jjStopAtPos(0, 236);
      case 8902:
         return jjStopAtPos(0, 280);
      case 9679:
         return jjStopAtPos(0, 234);
      case 9711:
         return jjStopAtPos(0, 232);
      case 10868:
         return jjStopAtPos(0, 233);
      case 10927:
         return jjStopAtPos(0, 267);
      case 10928:
         return jjStopAtPos(0, 284);
      case 10980:
         return jjStopAtPos(0, 252);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 219);
         break;
      case 35:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 187);
         break;
      case 36:
         if ((active3 & 0x200000L) != 0L)
            return jjStopAtPos(1, 213);
         break;
      case 37:
         if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 216);
         break;
      case 38:
         if ((active3 & 0x80000L) != 0L)
            return jjStopAtPos(1, 211);
         break;
      case 42:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(1, 195);
         break;
      case 43:
         if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(1, 197);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000002L, active4, 0L);
      case 45:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 191, 123);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(1, 209, 28);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L);
      case 46:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x200002000L, active4, 0L);
      case 47:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000L, active4, 0L);
      case 58:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(1, 200);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000L, active4, 0L);
      case 60:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 184);
         break;
      case 61:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x800L) != 0L)
            return jjStopAtPos(1, 203);
         else if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(1, 210);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 221);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L, active4, 0L);
      case 62:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 182);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 183);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 220);
         break;
      case 63:
         if ((active3 & 0x800000L) != 0L)
            return jjStopAtPos(1, 215);
         break;
      case 64:
         if ((active3 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 218);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000020000000000L, active1, 0x320L, active2, 0L, active3, 0L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_2(active0, 0x888000000000000L, active1, 0x6001L, active2, 0L, active3, 0L, active4, 0L);
      case 70:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 49, 273);
         return jjMoveStringLiteralDfa2_2(active0, 0x400000000000000L, active1, 0x200000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000040000000000L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x460010L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x8004000000000000L, active1, 0xb000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_2(active0, 0x60000000000000L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0xc00L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000000000L, active1, 0x8000L, active2, 0L, active3, 0L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x4000000000080000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
         if ((active4 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 292);
         return jjMoveStringLiteralDfa2_2(active0, 0xa00000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 62, 273);
         break;
      case 92:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L);
      case 93:
         return jjMoveStringLiteralDfa2_2(active0, 0x8000000000L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
      case 94:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 189);
         break;
      case 95:
         if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0xc0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x300L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x7c00L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x18000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0xc0000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x7800000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x1000000000L, active4, 0L);
      case 111:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x1f0000000L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0xe00000000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x7fff000000000L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x8000000400000L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 124:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 185);
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(1, 207);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 125:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 223);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 224);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 225);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 226);
         break;
      case 45:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 95);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L, active4, 0L);
      case 46:
         if ((active3 & 0x2000L) != 0L)
            return jjStopAtPos(2, 205);
         break;
      case 61:
         if ((active3 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 222);
         break;
      case 62:
         if ((active3 & 0x80L) != 0L)
            return jjStopAtPos(2, 199);
         break;
      case 65:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000L, active1, 0x1000000000008000L, active2, 0L, active3, 0L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_2(active0, 0x20200000000000L, active1, 0x2000000000024000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(2, 77, 273);
         return jjMoveStringLiteralDfa3_2(active0, 0x40000000000000L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(2, 67, 273);
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000000000L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x80001L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x8000000000000080L, active2, 0L, active3, 0L, active4, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x100L, active2, 0x1L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_2(active0, 0x40000000000L, active1, 0xc00L, active2, 0L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_2(active0, 0x4124000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 51, 273);
         return jjMoveStringLiteralDfa3_2(active0, 0x800000000000L, active1, 0x440000L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x60L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 55, 273);
         break;
      case 88:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000L, active4, 0L);
      case 95:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x800400L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x10000800L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x100000000000000L, active2, 0x1040000L, active3, 0L, active4, 0L);
      case 103:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(2, 147);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x3000009100L, active3, 0L, active4, 0x800000000L);
      case 108:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(2, 153);
         break;
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x600000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x4012000L, active3, 0x1000000000L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x8000040000040L, active3, 0L, active4, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0xfc000020000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 180);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0xe00000000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x80000080L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x100100000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x7e00000004200L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 227);
         break;
      case 62:
         if ((active3 & 0x2L) != 0L)
            return jjStopAtPos(3, 193);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_2(active0, 0x20000000000000L, active1, 0L, active2, 0x1L, active3, 0L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x1000000000000100L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 41, 273);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 44, 273);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(3, 68, 273);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(3, 69, 273);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(3, 73, 273);
         return jjMoveStringLiteralDfa4_2(active0, 0x100a00000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(3, 86, 274);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x41L, active2, 0L, active3, 0L, active4, 0L);
      case 75:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(3, 81, 273);
         break;
      case 78:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 61, 273);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x40000L, active2, 0L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000000L, active1, 0x8000000000000404L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000L, active1, 0x4000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_2(active0, 0x4000000000000L, active1, 0x8080L, active2, 0L, active3, 0L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_2(active0, 0x40004000000000L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 63, 273);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x600000000000L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x180c000000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x600000000L, active3, 0L, active4, 0L);
      case 103:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 120);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x120400000L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x80000c0000200L, active3, 0L, active4, 0L);
      case 109:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x802000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x810000800L, active3, 0L, active4, 0L);
      case 112:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(3, 138);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(3, 142);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x6000000000040L, active3, 0L, active4, 0L);
      case 113:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(3, 146);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 152);
         break;
      case 114:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 154);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0xf0000000000L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x210000L, active3, 0x1000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 118:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(3, 143);
         break;
      case 121:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0L, active2, 0x80L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000000000L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(4, 75, 273);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(4, 79, 274);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x4000000000040000L, active2, 0L, active3, 0L, active4, 0L);
      case 70:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(4, 74, 273);
         break;
      case 73:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x80000L, active2, 0x1L, active3, 0L, active4, 0L);
      case 76:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 53, 273);
         return jjMoveStringLiteralDfa5_2(active0, 0x40000000000000L, active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa5_2(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 127, 273);
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000000L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1040L, active2, 0L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 56, 273);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x4004L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_2(active0, 0x48000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x4080000000L, active3, 0L, active4, 0L);
      case 99:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(4, 140);
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x1000400000100L, active3, 0L, active4, 0L);
      case 100:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(4, 151);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x2000210000L, active3, 0L, active4, 0x800000000L);
      case 103:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(4, 141);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0x1000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x100000080L, active3, 0L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 114:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(4, 172);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x6600000000000L, active3, 0L, active4, 0L);
      case 116:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(4, 139);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 156);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0L, active2, 0x80f8040000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(3, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, active2, active3, active4);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(5, 72, 273);
         break;
      case 67:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 38, 273);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 42, 273);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 54, 273);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(5, 64, 273);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x1000000000000084L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(5, 128, 273);
         return jjMoveStringLiteralDfa6_2(active0, 0x4000000000000L, active1, 0x2000000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x44000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 45, 273);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 126, 274);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_2(active0, 0x8000000000L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x50000000000L, active3, 0L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x7600500000200L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L, active4, 0L);
      case 110:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(5, 150);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStopAtPos(5, 228);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0L);
      case 112:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(5, 135);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 166);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 167);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0xa0000000000L, active3, 0L, active4, 0L);
      case 113:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(5, 144);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 165);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L);
      case 115:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 158);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(5, 179);
         else if ((active4 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 291);
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 118:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(5, 145);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_2(4, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, active2, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_2(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 68:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(6, 71, 273);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 124, 273);
         break;
      case 69:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(6, 76);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x80000L, active2, 0L);
      case 71:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x4000L, active2, 0L);
      case 77:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(6, 66, 273);
         return jjMoveStringLiteralDfa7_2(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 47, 273);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(6, 70, 273);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(6, 82, 274);
         break;
      case 104:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 159);
         break;
      case 111:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 163);
         break;
      case 113:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 162);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(6, 176);
         break;
      case 114:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x100L);
      case 115:
         if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 157);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 160);
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0xf0000200000L);
      case 116:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(6, 137);
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0L, active2, 0x4400000000000L);
      case 120:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(6, 134);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(5, old0, old1, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, active2, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(7, 39);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 50, 273);
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 83:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(7, 83, 274);
         break;
      case 86:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0x4000L, active2, 0L);
      case 99:
         if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(7, 136);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_2(active0, 0L, active1, 0L, active2, 0x44f0000200000L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(6, old0, old1, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, 0L, active1, active2, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 125, 273);
         break;
      case 69:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_2(8, 78, 273);
         break;
      case 99:
         return jjMoveStringLiteralDfa9_2(active1, 0L, active2, 0x200000L);
      case 113:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(8, 174);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(8, 178);
         break;
      case 116:
         if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active1, 0L, active2, 0xc0000000000L);
      default :
         break;
   }
   return jjStartNfa_2(7, 0L, active1, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa9_2(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(7, 0L, old1, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, 0L, 0L, active2, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_2(active2, 0xc0000000000L);
      case 116:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(9, 149);
         break;
      default :
         break;
   }
   return jjStartNfa_2(8, 0L, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa10_2(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_2(8, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, 0L, 0L, active2, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 113:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(10, 170);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(10, 171);
         break;
      default :
         break;
   }
   return jjStartNfa_2(9, 0L, 0L, active2, 0L, 0L);
}
static final long[] jjbitVec0 = {
   0x8L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x80000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x10000000L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x0L, 0x20000000000L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x40000L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x10000L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x4000000000L, 0x0L
};
static final long[] jjbitVec9 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0x400000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x200000000L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x0L, 0x0L, 0x80L
};
static final long[] jjbitVec16 = {
   0x8000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec18 = {
   0x100L, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 272;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 263:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 274:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(193);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 190;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 186;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(185, 187);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 266:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 203:
                  if (curChar == 47 && kind > 133)
                     kind = 133;
                  break;
               case 111:
                  if (curChar == 42)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 124:
                  if (curChar == 62)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 127;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 165:
                  if (curChar == 62)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 264:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 134:
                  if (curChar == 61)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 123:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 125;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAddStates(37, 45);
                  }
                  else if (curChar == 60)
                     jjCheckNAddStates(46, 53);
                  else if (curChar == 62)
                     jjAddStates(54, 55);
                  else if (curChar == 61)
                     jjAddStates(56, 57);
                  else if (curChar == 45)
                     jjAddStates(58, 60);
                  else if (curChar == 40)
                     jjAddStates(61, 62);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 34)
                     jjCheckNAddStates(63, 66);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if (curChar == 60)
                     jjAddStates(67, 69);
                  else if (curChar == 48)
                  {
                     if (kind > 110)
                        kind = 110;
                  }
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(239, 240);
                  else if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(240);
                  else if (curChar == 62)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 108)
                        kind = 108;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(236, 237);
                  else if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(237);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(231, 232);
                  else if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(232);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(225, 226);
                  else if ((0xc0000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 272:
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 273:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 265:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(193);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(185, 187);
                  break;
               case 18:
                  if (curChar == 58 && kind > 89)
                     kind = 89;
                  break;
               case 19:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 28:
                  if (curChar == 62 && kind > 109)
                     kind = 109;
                  break;
               case 29:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 48 && kind > 110)
                     kind = 110;
                  break;
               case 33:
               case 39:
                  if (curChar == 34)
                     jjCheckNAddStates(63, 66);
                  break;
               case 34:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(63, 66);
                  break;
               case 36:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(63, 66);
                  break;
               case 40:
                  if (curChar == 34 && kind > 111)
                     kind = 111;
                  break;
               case 41:
                  if (curChar == 43 && kind > 115)
                     kind = 115;
                  break;
               case 50:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(60);
                  break;
               case 66:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 109:
                  if (curChar == 40)
                     jjAddStates(61, 62);
                  break;
               case 110:
                  if (curChar == 46 && kind > 26)
                     kind = 26;
                  break;
               case 112:
                  if (curChar == 42 && kind > 26)
                     kind = 26;
                  break;
               case 113:
                  if (curChar == 45)
                     jjAddStates(58, 60);
                  break;
               case 114:
               case 115:
                  if (curChar == 45)
                     jjCheckNAddStates(72, 74);
                  break;
               case 116:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(116, 122);
                  break;
               case 125:
               case 126:
                  if (curChar != 45)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(126);
                  break;
               case 127:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 128:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 62 && kind > 107)
                     kind = 107;
                  break;
               case 130:
                  if (curChar == 61)
                     jjAddStates(56, 57);
                  break;
               case 131:
               case 132:
                  if (curChar != 61)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(132);
                  break;
               case 133:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 135:
                  if (curChar == 61 && kind > 92)
                     kind = 92;
                  break;
               case 160:
                  if (curChar == 60)
                     jjAddStates(67, 69);
                  break;
               case 162:
                  if (curChar == 45 && kind > 108)
                     kind = 108;
                  break;
               case 163:
                  if (curChar == 62 && kind > 123)
                     kind = 123;
                  break;
               case 164:
                  if (curChar == 62)
                     jjAddStates(54, 55);
                  break;
               case 166:
                  if (curChar == 62 && kind > 105)
                     kind = 105;
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddStates(37, 45);
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(168);
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(169, 172);
                  break;
               case 171:
               case 186:
               case 196:
                  if (curChar == 47)
                     jjCheckNAdd(170);
                  break;
               case 172:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(173, 176);
                  break;
               case 174:
                  if (curChar == 47 && kind > 113)
                     kind = 113;
                  break;
               case 176:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(177, 178);
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(180, 181);
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(185, 187);
                  break;
               case 187:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  break;
               case 191:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(193);
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(193);
                  break;
               case 195:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 197:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  break;
               case 200:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(201);
                  break;
               case 224:
                  if (curChar == 60)
                     jjCheckNAddStates(46, 53);
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(225, 226);
                  break;
               case 226:
                  if (curChar == 62)
                     jjCheckNAdd(227);
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjCheckNAdd(227);
                  break;
               case 228:
                  if ((0xc0000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 229:
                  if (curChar == 62)
                     jjCheckNAdd(230);
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjCheckNAdd(230);
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 232:
                  if (curChar == 62)
                     jjCheckNAdd(233);
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(233, 234);
                  break;
               case 234:
                  if (curChar != 46)
                     break;
                  if (kind > 296)
                     kind = 296;
                  jjCheckNAdd(234);
                  break;
               case 235:
                  if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(232);
                  break;
               case 236:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(236, 237);
                  break;
               case 237:
                  if (curChar == 62 && kind > 297)
                     kind = 297;
                  break;
               case 238:
                  if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(237);
                  break;
               case 239:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(239, 240);
                  break;
               case 240:
                  if (curChar == 62)
                     jjCheckNAddStates(75, 77);
                  break;
               case 241:
                  if (curChar != 42)
                     break;
                  if (kind > 298)
                     kind = 298;
                  jjCheckNAdd(242);
                  break;
               case 242:
                  if (curChar != 46)
                     break;
                  if (kind > 298)
                     kind = 298;
                  jjCheckNAdd(242);
                  break;
               case 243:
                  if (curChar != 45)
                     break;
                  if (kind > 298)
                     kind = 298;
                  jjCheckNAdd(244);
                  break;
               case 244:
                  if (curChar != 46)
                     break;
                  if (kind > 298)
                     kind = 298;
                  jjCheckNAdd(244);
                  break;
               case 245:
                  if (curChar != 46)
                     break;
                  if (kind > 298)
                     kind = 298;
                  jjCheckNAdd(245);
                  break;
               case 246:
                  if ((0xc0000000000L & l) != 0L)
                     jjCheckNAdd(240);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 263:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 274:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(193);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(185, 187);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 266:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 104:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 106;
                  if (curChar == 70)
                  {
                     if (kind > 65)
                        kind = 65;
                  }
                  break;
               case 143:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 158;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 150;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 203:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(70);
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 222;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 219;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 215;
                  else if (curChar == 65)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 208;
                  else if (curChar == 69)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 105:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 107;
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 264:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 0:
                  if ((0x7fffffe0777fffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAddStates(78, 82);
                  }
                  else if ((0x880000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjAddStates(83, 85);
                  }
                  else if (curChar == 92)
                     jjAddStates(86, 92);
                  else if (curChar == 64)
                  {
                     if (kind > 293)
                        kind = 293;
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(55, 56);
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 65)
                     jjAddStates(93, 96);
                  else if (curChar == 67)
                     jjAddStates(97, 99);
                  else if (curChar == 68)
                     jjAddStates(100, 101);
                  else if (curChar == 84)
                     jjAddStates(102, 103);
                  else if (curChar == 86)
                     jjAddStates(104, 105);
                  else if (curChar == 92)
                     jjAddStates(106, 108);
                  else if (curChar == 83)
                     jjCheckNAdd(58);
                  else if (curChar == 87)
                     jjCheckNAdd(58);
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 252:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 270;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 266;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 257;
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 272:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(57);
                  }
                  break;
               case 273:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 265:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(201);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  if (curChar == 83)
                  {
                     if (kind > 65)
                        kind = 65;
                  }
                  break;
               case 184:
                  if ((0x7fffffe87ffffbeL & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjCheckNAdd(193);
                  }
                  else if (curChar == 70)
                  {
                     if (kind > 293)
                        kind = 293;
                     jjstateSet[jjnewStateCnt++] = 59;
                  }
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(185, 187);
                  break;
               case 2:
                  if (curChar == 78 && kind > 57)
                     kind = 57;
                  break;
               case 3:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 65 && kind > 57)
                     kind = 57;
                  break;
               case 14:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 23:
                  if (curChar == 95 && kind > 104)
                     kind = 104;
                  break;
               case 30:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 34:
                  if ((0xfffffffeefffffffL & l) != 0L)
                     jjCheckNAddStates(63, 66);
                  break;
               case 35:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 36:
                  jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x14404010000000L & l) != 0L)
                     jjCheckNAddStates(63, 66);
                  break;
               case 42:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 45:
                  if (curChar == 93 && kind > 122)
                     kind = 122;
                  break;
               case 46:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if (curChar == 92 && kind > 130)
                     kind = 130;
                  break;
               case 54:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(57);
                  break;
               case 58:
                  if (curChar != 70)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if (curChar == 87)
                     jjCheckNAdd(58);
                  break;
               case 62:
                  if (curChar == 83)
                     jjCheckNAdd(58);
                  break;
               case 63:
                  if (curChar == 64 && kind > 293)
                     kind = 293;
                  break;
               case 64:
                  if (curChar == 92)
                     jjAddStates(106, 108);
                  break;
               case 65:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 67:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 69:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAdd(70);
                  break;
               case 71:
                  if (curChar == 86)
                     jjAddStates(104, 105);
                  break;
               case 72:
                  if (curChar == 69 && kind > 84)
                     kind = 84;
                  break;
               case 73:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 83 && kind > 84)
                     kind = 84;
                  break;
               case 80:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 84)
                     jjAddStates(102, 103);
                  break;
               case 88:
                  if (curChar == 76 && kind > 80)
                     kind = 80;
                  break;
               case 89:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 95:
                  if (curChar == 83 && kind > 80)
                     kind = 80;
                  break;
               case 96:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 68)
                     jjAddStates(100, 101);
                  break;
               case 107:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 117:
                  if (curChar == 69 && kind > 34)
                     kind = 34;
                  break;
               case 118:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 136:
                  if (curChar == 67)
                     jjAddStates(97, 99);
                  break;
               case 137:
                  if (curChar == 84 && kind > 43)
                     kind = 43;
                  break;
               case 138:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 144:
                  if (curChar == 83 && kind > 43)
                     kind = 43;
                  break;
               case 145:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 89 && kind > 57)
                     kind = 57;
                  break;
               case 153:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 169:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(109, 110);
                  break;
               case 170:
                  if (curChar == 92 && kind > 112)
                     kind = 112;
                  break;
               case 173:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(111, 112);
                  break;
               case 175:
               case 190:
               case 199:
                  if (curChar == 92)
                     jjCheckNAdd(174);
                  break;
               case 177:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(113, 114);
                  break;
               case 178:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(179);
                  break;
               case 179:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(179);
                  break;
               case 181:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(182);
                  break;
               case 182:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(182);
                  break;
               case 183:
                  if ((0x880000L & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjAddStates(83, 85);
                  break;
               case 185:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(185, 187);
                  break;
               case 188:
                  if ((0x7fffffe07ffffbeL & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  break;
               case 189:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(189, 191);
                  break;
               case 192:
                  if ((0x7fffffe87ffffbeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(193);
                  break;
               case 193:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(193);
                  break;
               case 194:
                  if ((0x7fffffe0777fffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAddStates(78, 82);
                  break;
               case 195:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(195, 197);
                  break;
               case 198:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(198, 200);
                  break;
               case 201:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 293)
                     kind = 293;
                  jjCheckNAdd(201);
                  break;
               case 202:
                  if (curChar == 92)
                     jjAddStates(86, 92);
                  break;
               case 204:
                  if (curChar == 115 && kind > 46)
                     kind = 46;
                  break;
               case 205:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 65 && kind > 48)
                     kind = 48;
                  break;
               case 211:
                  if (curChar == 108 && kind > 48)
                     kind = 48;
                  break;
               case 212:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 116 && kind > 119)
                     kind = 119;
                  break;
               case 218:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 222:
                  if (curChar == 110 && kind > 148)
                     kind = 148;
                  break;
               case 223:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 227:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 230:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 295)
                     kind = 295;
                  jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 233:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(115, 116);
                  break;
               case 247:
                  if (curChar == 65)
                     jjAddStates(93, 96);
                  break;
               case 248:
                  if (curChar == 78 && kind > 37)
                     kind = 37;
                  break;
               case 249:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 253:
                  if (curChar == 83 && kind > 37)
                     kind = 37;
                  break;
               case 254:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 259:
                  if (curChar == 78 && kind > 40)
                     kind = 40;
                  break;
               case 260:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 261:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 267:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 77 && kind > 40)
                     kind = 40;
                  break;
               case 269:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 103)
                        kind = 103;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 23;
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 108)
                        kind = 108;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 115)
                        kind = 115;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 130)
                        kind = 130;
                  }
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 133)
                        kind = 133;
                  }
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 148)
                        kind = 148;
                  }
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 48)
                     kind = 48;
                  break;
               case 20:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 89)
                     kind = 89;
                  break;
               case 21:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 92)
                     kind = 92;
                  break;
               case 22:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 103)
                     kind = 103;
                  break;
               case 24:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 105)
                     kind = 105;
                  break;
               case 26:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 107)
                     kind = 107;
                  break;
               case 27:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 108)
                     kind = 108;
                  break;
               case 31:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 109)
                     kind = 109;
                  break;
               case 34:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjAddStates(63, 66);
                  break;
               case 36:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                     jjAddStates(70, 71);
                  break;
               case 43:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 115)
                     kind = 115;
                  break;
               case 44:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 119)
                     kind = 119;
                  break;
               case 47:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 122)
                     kind = 122;
                  break;
               case 48:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2) && kind > 123)
                     kind = 123;
                  break;
               case 51:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2) && kind > 130)
                     kind = 130;
                  break;
               case 52:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2) && kind > 133)
                     kind = 133;
                  break;
               case 53:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2) && kind > 148)
                     kind = 148;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 272 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x20000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjAddStates(3, 4);
                  break;
               case 1:
                  if (curChar == 46)
                     kind = 28;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 42 && kind > 28)
                     kind = 28;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 8, 2, 3, 24, 25, 28, 29, 32, 33, 34, 36, 37, 2, 3, 
   9, 14, 15, 51, 53, 54, 56, 51, 53, 54, 56, 57, 40, 44, 48, 25, 
   28, 29, 32, 33, 34, 168, 169, 172, 173, 176, 177, 178, 180, 181, 225, 228, 
   231, 235, 236, 238, 239, 246, 165, 166, 134, 135, 124, 128, 129, 111, 112, 34, 
   35, 38, 40, 161, 162, 163, 36, 37, 115, 116, 122, 241, 243, 245, 195, 197, 
   198, 200, 201, 184, 188, 192, 203, 209, 210, 216, 220, 221, 223, 252, 258, 267, 
   271, 143, 151, 159, 105, 108, 94, 102, 78, 86, 65, 67, 69, 169, 172, 173, 
   176, 177, 178, 233, 234, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec1[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec5[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec6[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      default : 
         if ((jjbitVec9[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec12[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec13[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 37:
         return ((jjbitVec14[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 37:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec16[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec17[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec18[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, "\55\55\55\76", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, 
"\101\123\123\125\115\105", "\133\135\101\123\123\125\115\105", null, "\103\101\123\105", 
"\103\110\117\117\123\105", null, "\105\114\123\105", "\105\130\103\105\120\124", null, 
"\105\130\124\105\116\104\123", null, "\111\106", "\111\116\123\124\101\116\103\105", "\114\105\124", 
"\111\116", "\114\117\103\101\114", "\115\117\104\125\114\105", "\116\105\127", 
"\117\124\110\105\122", null, "\123\106\137", "\134\105\105", "\134\101\101", "\124\110\105\116", 
"\102\131", "\117\116\114\131", "\104\105\106\111\116\105", null, 
"\124\110\105\117\122\105\115", "\125\123\105", "\110\111\104\105", "\110\101\126\105", 
"\117\102\126\111\117\125\123", "\117\115\111\124\124\105\104", "\114\101\115\102\104\101", 
"\124\101\113\105", "\120\122\117\117\106", "\120\122\117\126\105", 
"\133\135\120\122\117\126\105", "\121\105\104", "\122\105\103\125\122\123\111\126\105", 
"\123\124\101\124\105", null, "\120\111\103\113", "\127\111\124\116\105\123\123", 
"\123\125\106\106\111\103\105\123", null, "\127\106\137", "\127\111\124\110", "\54", "\72", null, "\56", "\137", 
null, "\50", "\51", "\55\174\55", "\133", "\135\137", "\135", "\173\174", 
"\174\175", "\173", "\175", null, null, null, "\41", null, null, null, null, null, null, 
null, "\47", null, "\136\52", "\136\43", "\55\56", null, "\134\156\145\147", "\176", 
null, null, "\105\116\101\102\114\105\104", "\125\116\103\110\101\116\107\105\104", 
"\123\125\102\123\105\124", "\125\116\111\117\116", "\104\117\115\101\111\116", "\57\57", null, "\57\75", 
"\57", null, "\134\141\160\160\162\157\170", "\134\141\163\171\155\160", 
"\134\142\151\147\143\151\162\143", "\134\142\165\154\154\145\164", "\134\143\141\160", "\134\143\144\157\164", 
"\134\143\151\162\143", "\134\143\157\156\147", "\134\143\165\160", "\134\144\151\166", 
"\134\144\157\164\145\161", "\134\145\161\165\151\166", "\134\147\145\161", "\134\147\147", null, 
"\134\151\156\164\145\162\163\145\143\164", "\134\165\156\151\157\156", "\134\154\141\156\144", "\134\154\145\161", 
"\134\154\154", "\134\154\157\162", "\134\157", "\134\157\144\157\164", 
"\134\157\155\151\156\165\163", "\134\157\160\154\165\163", "\134\157\163\154\141\163\150", 
"\134\157\164\151\155\145\163", "\134\160\162\145\143", "\134\160\162\145\143\145\161", 
"\134\160\162\157\160\164\157", "\134\163\151\155", "\134\163\151\155\145\161", "\134\163\161\143\141\160", 
"\134\163\161\143\165\160", "\134\163\161\163\165\142\163\145\164", 
"\134\163\161\163\165\160\163\145\164", "\134\163\161\163\165\142\163\145\164\145\161", 
"\134\163\161\163\165\160\163\145\164\145\161", "\134\163\164\141\162", "\134\163\165\142\163\145\164", 
"\134\163\165\142\163\145\164\145\161", "\134\163\165\143\143", "\134\163\165\143\143\145\161", 
"\134\163\165\160\163\145\164", "\134\163\165\160\163\145\164\145\161", "\134\165\160\154\165\163", 
"\134\167\162", "\134", "\176\76", "\75\76", "\75\74", "\75\174", "\75", "\43\43", "\43", 
"\136\136", "\136", "\55\55", "\55\174", "\55\53\55\76", "\55", "\52\52", "\52", "\53\53", 
"\53", "\74\75\76", "\74\72", "\74\75", "\74", "\76\75", "\76", "\56\56\56", 
"\56\56", "\174\174", "\174", "\174\55", "\174\75", "\46\46", "\46", "\44\44", "\44", 
"\77\77", "\45\45", "\45", "\100\100", "\41\41", "\72\76", "\72\75", "\72\72\75", 
"\50\53\51", "\50\55\51", "\50\56\51", "\50\57\51", "\50\134\130\51", 
"\134\156\157\164\151\156", "\u2248", "\u2254", "\u224d", "\u25ef", "\u2a74", "\u25cf", "\u2229", 
"\u22c5", "\u2218", "\u2245", "\u222a", "\367", "\u2250", "\u2025", "\u2026", "\u2261", 
"\u203c", "\u2265", "\u226b", "\u21d4", "\u21d2", "\u2208", "\u2227", "\u2ae4", 
"\u219d", "\u2264", "\u226a", "\u2228", "\u22a3", "\u2260", "\u2209", "\u2299", 
"\u2296", "\u2295", "\u2298", "\u2297", "\u21f8", "\u227a", "\u2aaf", "\u221d", 
"\u2047", "\u22a8", "\u22a2", "\u223c", "\u2243", "\u2293", "\u2294", "\u228f", 
"\u2291", "\u2290", "\u2292", "\u22c6", "\u2282", "\u2286", "\u227b", "\u2ab0", 
"\u2283", "\u2287", "\327", "\u228e", "\u2016", "\u2240", "\134\164\151\155\145\163", 
"\134\130", null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "PRAGMA", 
   "SPEC", 
   "IN_COMMENT", 
   "EMBEDDED", 
   "IN_EOL_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 
   -1, 3, 5, 4, 2, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffc0018000dL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x7ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1f3e00010L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoSpecial = {
   0x1f0000000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoMore = {
   0x20c000000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[272];
private final int[] jjstateSet = new int[544];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TLAplusParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TLAplusParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 272; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 4)
         {
            jjmatchedKind = 4;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 33)
         {
            jjmatchedKind = 33;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 28 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     bracketCount++;
         break;
      case 30 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            bracketCount--; if (bracketCount == 0) SwitchTo( IN_COMMENT );
         break;
      case 31 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     bracketCount++;
         break;
      default :
         break;
   }
}
}
