/* Generated By:23&JavaCC: Do not edit this line. TLAplusParserConstants.java */
package tla2sany.parser;

public interface TLAplusParserConstants {

  int EOF = 0;
  int BEGIN_MODULE = 1;
  int BEGIN_PRAGMA = 2;
  int _BM1 = 3;
  int CASE0 = 5;
  int CASE1 = 6;
  int CASE1b = 7;
  int CASE1c = 8;
  int CASE2 = 9;
  int CASE2b = 10;
  int CASE2c = 11;
  int CASE3 = 12;
  int CASE6 = 13;
  int CASE6b = 14;
  int CASE6c = 15;
  int CASEN = 16;
  int LETTER = 17;
  int DIGIT = 18;
  int NUMBER_SET = 19;
  int NUMBER = 20;
  int _BM2 = 21;
  int _BM0 = 35;
  int SEPARATOR = 36;
  int END_MODULE = 37;
  int ACTION = 38;
  int ASSUME = 39;
  int BOXASSUME = 40;
  int ASSUMPTION = 41;
  int CASE = 42;
  int CHOOSE = 43;
  int CONSTANT = 44;
  int ELSE = 45;
  int EXCEPT = 46;
  int EXISTS = 47;
  int EXTENDS = 48;
  int FORALL = 49;
  int IF = 50;
  int INSTANCE = 51;
  int LET = 52;
  int LETIN = 53;
  int LOCAL = 54;
  int MODULE = 55;
  int NEW = 56;
  int OTHER = 57;
  int PROPOSITION = 58;
  int SF = 59;
  int T_EXISTS = 60;
  int T_FORALL = 61;
  int THEN = 62;
  int BY = 63;
  int ONLY = 64;
  int DEFINE = 65;
  int DF = 66;
  int THEOREM = 67;
  int USE = 68;
  int HIDE = 69;
  int HAVE = 70;
  int OBVIOUS = 71;
  int OMITTED = 72;
  int LAMBDA = 73;
  int TAKE = 74;
  int PROOF = 75;
  int PROVE = 76;
  int BOXPROVE = 77;
  int QED = 78;
  int RECURSIVE = 79;
  int STATE = 80;
  int TEMPORAL = 81;
  int PICK = 82;
  int WITNESS = 83;
  int SUFFICES = 84;
  int VARIABLE = 85;
  int WF = 86;
  int WITH = 87;
  int COMMA = 88;
  int COLON = 89;
  int COLONCOLON = 90;
  int DOT = 91;
  int US = 92;
  int DEF = 93;
  int LBR = 94;
  int RBR = 95;
  int DEFBREAK = 96;
  int LSB = 97;
  int ARSB = 98;
  int RSB = 99;
  int LWB = 100;
  int RWB = 101;
  int LBC = 102;
  int RBC = 103;
  int LAB = 104;
  int ARAB = 105;
  int RAB = 106;
  int BANG = 107;
  int ARROW = 108;
  int SUBSTITUTE = 109;
  int MAPTO = 110;
  int NUMBER_LITERAL = 111;
  int STRING_LITERAL = 112;
  int BAND = 113;
  int BOR = 114;
  int op_57 = 115;
  int op_68 = 116;
  int op_69 = 117;
  int op_70 = 118;
  int op_76 = 119;
  int op_26 = 120;
  int op_29 = 121;
  int op_58 = 122;
  int CASESEP = 123;
  int op_61 = 124;
  int op_112 = 125;
  int op_113 = 126;
  int op_114 = 127;
  int op_115 = 128;
  int op_116 = 129;
  int op_1 = 130;
  int AND = 131;
  int op_3 = 132;
  int op_4 = 133;
  int OR = 134;
  int op_6 = 135;
  int op_7 = 136;
  int op_8 = 137;
  int op_9 = 138;
  int op_10 = 139;
  int op_11 = 140;
  int op_12 = 141;
  int op_13 = 142;
  int op_14 = 143;
  int op_15 = 144;
  int op_16 = 145;
  int op_17 = 146;
  int op_18 = 147;
  int op_19 = 148;
  int IN = 149;
  int op_21 = 150;
  int op_22 = 151;
  int op_23 = 152;
  int op_24 = 153;
  int op_25 = 154;
  int op_27 = 155;
  int op_30 = 156;
  int op_31 = 157;
  int op_32 = 158;
  int op_33 = 159;
  int op_34 = 160;
  int op_35 = 161;
  int op_36 = 162;
  int op_37 = 163;
  int op_38 = 164;
  int op_39 = 165;
  int op_40 = 166;
  int op_41 = 167;
  int op_42 = 168;
  int op_43 = 169;
  int op_44 = 170;
  int op_45 = 171;
  int op_46 = 172;
  int op_47 = 173;
  int op_48 = 174;
  int op_49 = 175;
  int op_50 = 176;
  int op_51 = 177;
  int op_52 = 178;
  int op_53 = 179;
  int op_54 = 180;
  int op_55 = 181;
  int op_56 = 182;
  int op_59 = 183;
  int op_62 = 184;
  int op_63 = 185;
  int op_64 = 186;
  int EQUALS = 187;
  int op_66 = 188;
  int op_67 = 189;
  int op_71 = 190;
  int op_72 = 191;
  int op_73 = 192;
  int op_74 = 193;
  int op_75 = 194;
  int op_77 = 195;
  int op_78 = 196;
  int op_79 = 197;
  int op_80 = 198;
  int op_81 = 199;
  int op_82 = 200;
  int op_83 = 201;
  int op_84 = 202;
  int op_85 = 203;
  int op_86 = 204;
  int op_87 = 205;
  int op_88 = 206;
  int op_89 = 207;
  int op_90 = 208;
  int op_91 = 209;
  int op_92 = 210;
  int op_93 = 211;
  int op_94 = 212;
  int op_95 = 213;
  int op_96 = 214;
  int op_97 = 215;
  int op_98 = 216;
  int op_100 = 217;
  int op_101 = 218;
  int op_102 = 219;
  int op_103 = 220;
  int op_104 = 221;
  int op_105 = 222;
  int op_106 = 223;
  int op_107 = 224;
  int op_108 = 225;
  int op_109 = 226;
  int op_110 = 227;
  int op_111 = 228;
  int op_117 = 229;
  int op_infix_approx_uc = 230;
  int op_infix_assign_uc = 231;
  int op_infix_asymp_uc = 232;
  int op_infix_bigcirc_uc = 233;
  int op_infix_bnf_rule_uc = 234;
  int op_infix_bullet_uc = 235;
  int op_infix_cap_uc = 236;
  int op_infix_cdot_uc = 237;
  int op_infix_circ_uc = 238;
  int op_infix_cong_uc = 239;
  int op_infix_cup_uc = 240;
  int op_infix_div_uc = 241;
  int op_infix_doteq_uc = 242;
  int op_infix_dots_2_uc = 243;
  int op_infix_dots_3_uc = 244;
  int op_infix_equiv_uc = 245;
  int op_infix_excl_uc = 246;
  int op_infix_geq_uc = 247;
  int op_infix_gg_uc = 248;
  int op_infix_iff_uc = 249;
  int op_infix_implies_uc = 250;
  int op_infix_in_uc = 251;
  int op_infix_land_uc = 252;
  int op_infix_ld_ttile_uc = 253;
  int op_infix_leads_to_uc = 254;
  int op_infix_leq_uc = 255;
  int op_infix_ll_uc = 256;
  int op_infix_lor_uc = 257;
  int op_infix_ls_ttile_uc = 258;
  int op_infix_neq_uc = 259;
  int op_infix_notin_uc = 260;
  int op_infix_odot_uc = 261;
  int op_infix_ominus_uc = 262;
  int op_infix_oplus_uc = 263;
  int op_infix_oslash_uc = 264;
  int op_infix_otimes_uc = 265;
  int op_infix_plus_arrow_uc = 266;
  int op_infix_prec_uc = 267;
  int op_infix_preceq_uc = 268;
  int op_infix_propto_uc = 269;
  int op_infix_qq_uc = 270;
  int op_infix_rd_ttile_uc = 271;
  int op_infix_rs_ttile_uc = 272;
  int op_infix_sim_uc = 273;
  int op_infix_simeq_uc = 274;
  int op_infix_sqcap_uc = 275;
  int op_infix_sqcup_uc = 276;
  int op_infix_sqsubset_uc = 277;
  int op_infix_sqsubseteq_uc = 278;
  int op_infix_sqsupset_uc = 279;
  int op_infix_sqsupseteq_uc = 280;
  int op_infix_star_uc = 281;
  int op_infix_subset_uc = 282;
  int op_infix_subseteq_uc = 283;
  int op_infix_succ_uc = 284;
  int op_infix_succeq_uc = 285;
  int op_infix_supset_uc = 286;
  int op_infix_supseteq_uc = 287;
  int op_infix_times_uc = 288;
  int op_infix_uplus_uc = 289;
  int op_infix_vertvert_uc = 290;
  int op_infix_wr_uc = 291;
  int op_118 = 292;
  int op_119 = 293;
  int IDENTIFIER = 294;
  int ProofStepLexeme = 295;
  int ProofImplicitStepLexeme = 296;
  int ProofStepDotLexeme = 297;
  int BareLevelLexeme = 298;
  int UnnumberedStepLexeme = 299;

  int DEFAULT = 0;
  int PRAGMA = 1;
  int SPEC = 2;
  int IN_COMMENT = 3;
  int EMBEDDED = 4;
  int IN_EOL_COMMENT = 5;

  String[] tokenImage = {
    "<EOF>",
    "<BEGIN_MODULE>",
    "\"--->\"",
    "<_BM1>",
    "<token of kind 4>",
    "<CASE0>",
    "<CASE1>",
    "<CASE1b>",
    "<CASE1c>",
    "<CASE2>",
    "<CASE2b>",
    "<CASE2c>",
    "<CASE3>",
    "<CASE6>",
    "<CASE6b>",
    "<CASE6c>",
    "<CASEN>",
    "<LETTER>",
    "<DIGIT>",
    "<NUMBER_SET>",
    "<NUMBER>",
    "<_BM2>",
    "<token of kind 22>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 27>",
    "\"\\\\*\"",
    "<token of kind 29>",
    "\"*)\"",
    "\"*)\"",
    "<token of kind 32>",
    "<token of kind 33>",
    "<token of kind 34>",
    "<_BM0>",
    "<SEPARATOR>",
    "<END_MODULE>",
    "<ACTION>",
    "\"ASSUME\"",
    "\"[]ASSUME\"",
    "<ASSUMPTION>",
    "\"CASE\"",
    "\"CHOOSE\"",
    "<CONSTANT>",
    "\"ELSE\"",
    "\"EXCEPT\"",
    "<EXISTS>",
    "\"EXTENDS\"",
    "<FORALL>",
    "\"IF\"",
    "\"INSTANCE\"",
    "\"LET\"",
    "\"IN\"",
    "\"LOCAL\"",
    "\"MODULE\"",
    "\"NEW\"",
    "\"OTHER\"",
    "<PROPOSITION>",
    "\"SF_\"",
    "\"\\\\EE\"",
    "\"\\\\AA\"",
    "\"THEN\"",
    "\"BY\"",
    "\"ONLY\"",
    "\"DEFINE\"",
    "<DF>",
    "\"THEOREM\"",
    "\"USE\"",
    "\"HIDE\"",
    "\"HAVE\"",
    "\"OBVIOUS\"",
    "\"OMITTED\"",
    "\"LAMBDA\"",
    "\"TAKE\"",
    "\"PROOF\"",
    "\"PROVE\"",
    "\"[]PROVE\"",
    "\"QED\"",
    "\"RECURSIVE\"",
    "\"STATE\"",
    "<TEMPORAL>",
    "\"PICK\"",
    "\"WITNESS\"",
    "\"SUFFICES\"",
    "<VARIABLE>",
    "\"WF_\"",
    "\"WITH\"",
    "\",\"",
    "\":\"",
    "<COLONCOLON>",
    "\".\"",
    "\"_\"",
    "<DEF>",
    "\"(\"",
    "\")\"",
    "\"-|-\"",
    "\"[\"",
    "\"]_\"",
    "\"]\"",
    "\"{|\"",
    "\"|}\"",
    "\"{\"",
    "\"}\"",
    "<LAB>",
    "<ARAB>",
    "<RAB>",
    "\"!\"",
    "<ARROW>",
    "<SUBSTITUTE>",
    "<MAPTO>",
    "<NUMBER_LITERAL>",
    "<STRING_LITERAL>",
    "<BAND>",
    "<BOR>",
    "\"\\\'\"",
    "<op_68>",
    "\"^*\"",
    "\"^#\"",
    "\"-.\"",
    "<op_26>",
    "\"\\\\neg\"",
    "\"~\"",
    "<CASESEP>",
    "<op_61>",
    "\"ENABLED\"",
    "\"UNCHANGED\"",
    "\"SUBSET\"",
    "\"UNION\"",
    "\"DOMAIN\"",
    "\"//\"",
    "<AND>",
    "\"/=\"",
    "\"/\"",
    "<OR>",
    "\"\\\\approx\"",
    "\"\\\\asymp\"",
    "\"\\\\bigcirc\"",
    "\"\\\\bullet\"",
    "\"\\\\cap\"",
    "\"\\\\cdot\"",
    "\"\\\\circ\"",
    "\"\\\\cong\"",
    "\"\\\\cup\"",
    "\"\\\\div\"",
    "\"\\\\doteq\"",
    "\"\\\\equiv\"",
    "\"\\\\geq\"",
    "\"\\\\gg\"",
    "<IN>",
    "\"\\\\intersect\"",
    "\"\\\\union\"",
    "\"\\\\land\"",
    "\"\\\\leq\"",
    "\"\\\\ll\"",
    "\"\\\\lor\"",
    "\"\\\\o\"",
    "\"\\\\odot\"",
    "\"\\\\ominus\"",
    "\"\\\\oplus\"",
    "\"\\\\oslash\"",
    "\"\\\\otimes\"",
    "\"\\\\prec\"",
    "\"\\\\preceq\"",
    "\"\\\\propto\"",
    "\"\\\\sim\"",
    "\"\\\\simeq\"",
    "\"\\\\sqcap\"",
    "\"\\\\sqcup\"",
    "\"\\\\sqsubset\"",
    "\"\\\\sqsupset\"",
    "\"\\\\sqsubseteq\"",
    "\"\\\\sqsupseteq\"",
    "\"\\\\star\"",
    "\"\\\\subset\"",
    "\"\\\\subseteq\"",
    "\"\\\\succ\"",
    "\"\\\\succeq\"",
    "\"\\\\supset\"",
    "\"\\\\supseteq\"",
    "\"\\\\uplus\"",
    "\"\\\\wr\"",
    "\"\\\\\"",
    "\"~>\"",
    "\"=>\"",
    "\"=<\"",
    "\"=|\"",
    "\"=\"",
    "\"##\"",
    "\"#\"",
    "\"^^\"",
    "\"^\"",
    "\"--\"",
    "\"-|\"",
    "\"-+->\"",
    "\"-\"",
    "\"**\"",
    "\"*\"",
    "\"++\"",
    "\"+\"",
    "\"<=>\"",
    "\"<:\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"...\"",
    "\"..\"",
    "\"||\"",
    "\"|\"",
    "\"|-\"",
    "\"|=\"",
    "\"&&\"",
    "\"&\"",
    "\"$$\"",
    "\"$\"",
    "\"??\"",
    "\"%%\"",
    "\"%\"",
    "\"@@\"",
    "\"!!\"",
    "\":>\"",
    "\":=\"",
    "\"::=\"",
    "\"(+)\"",
    "\"(-)\"",
    "\"(.)\"",
    "\"(/)\"",
    "\"(\\\\X)\"",
    "\"\\\\notin\"",
    "\"\\u2248\"",
    "\"\\u2254\"",
    "\"\\u224d\"",
    "\"\\u25ef\"",
    "\"\\u2a74\"",
    "\"\\u25cf\"",
    "\"\\u2229\"",
    "\"\\u22c5\"",
    "\"\\u2218\"",
    "\"\\u2245\"",
    "\"\\u222a\"",
    "\"\\u00f7\"",
    "\"\\u2250\"",
    "\"\\u2025\"",
    "\"\\u2026\"",
    "\"\\u2261\"",
    "\"\\u203c\"",
    "\"\\u2265\"",
    "\"\\u226b\"",
    "\"\\u21d4\"",
    "\"\\u21d2\"",
    "\"\\u2208\"",
    "\"\\u2227\"",
    "\"\\u2ae4\"",
    "\"\\u219d\"",
    "\"\\u2264\"",
    "\"\\u226a\"",
    "\"\\u2228\"",
    "\"\\u22a3\"",
    "\"\\u2260\"",
    "\"\\u2209\"",
    "\"\\u2299\"",
    "\"\\u2296\"",
    "\"\\u2295\"",
    "\"\\u2298\"",
    "\"\\u2297\"",
    "\"\\u21f8\"",
    "\"\\u227a\"",
    "\"\\u2aaf\"",
    "\"\\u221d\"",
    "\"\\u2047\"",
    "\"\\u22a8\"",
    "\"\\u22a2\"",
    "\"\\u223c\"",
    "\"\\u2243\"",
    "\"\\u2293\"",
    "\"\\u2294\"",
    "\"\\u228f\"",
    "\"\\u2291\"",
    "\"\\u2290\"",
    "\"\\u2292\"",
    "\"\\u22c6\"",
    "\"\\u2282\"",
    "\"\\u2286\"",
    "\"\\u227b\"",
    "\"\\u2ab0\"",
    "\"\\u2283\"",
    "\"\\u2287\"",
    "\"\\u00d7\"",
    "\"\\u228e\"",
    "\"\\u2016\"",
    "\"\\u2240\"",
    "\"\\\\times\"",
    "\"\\\\X\"",
    "<IDENTIFIER>",
    "<ProofStepLexeme>",
    "<ProofImplicitStepLexeme>",
    "<ProofStepDotLexeme>",
    "<BareLevelLexeme>",
    "<UnnumberedStepLexeme>",
  };

}
